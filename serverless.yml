service: med-manage-serverless-${opt:stage}
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  stackName: med-manage-serverless-${opt:stage}
  environment: ${file(env.yml):${self:custom.stage}}
  apiGateway:
    restApiId: ${ssm:med-manage-api-restApiId-${opt:stage}}
    restApiRootResourceId: ${ssm:med-manage-api-restApiRootResourceId-${opt:stage}}
  iam:
    role: IAMServerlessRoleMedManage
custom:
  stage: ${opt:stage}
  pythonRequirements:
    layer: true

package:
  individually: true
  patterns:
    - "!./**"
    - "src/http_response.py"
    - "src/utils/unmarshall.py"
    - "!package.json"
    - "!package-lock.json"
    - "!node_modules/**"

functions:
  patients-get:
    name: patients-lambda-get-${opt:stage}
    package:
      patterns:
        - src/utils/token.py
        - src/patients.py
        - src/patients_handler_get.py
    handler: src/patients_handler_get.handler
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - http:
          path: /patients
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MedManageCognitoAuthorizer

  employees-get:
    name: employees-lambda-get-${opt:stage}
    package:
      patterns:
        - src/utils/token.py
        - src/employees.py
        - src/employees_handler_get.py
    handler: src/employees_handler_get.handler
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - http:
          path: /employees
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MedManageCognitoAuthorizer

  organizations-get:
    name: organization-lambda-get-${opt:stage}
    package:
      patterns:
        - src/organizations.py
        - src/organizations_handler_get.py
    handler: src/organizations_handler_get.handler
    events:
      - http:
          path: /organizations
          method: get

  organizations-post:
    name: organization-lambda-post-${opt:stage}
    package:
      patterns:
        - src/organizations.py
        - src/authorization.py
        - src/employees.py
        - src/organizations_handler_post.py
    handler: src/organizations_handler_post.handler
    events:
      - http:
          path: /organizations
          method: post
          cors: true

  login-post:
    name: login-lambda-post-${opt:stage}
    package:
      patterns:
        - src/authorization.py
        - src/login_handler_post.py
    handler: src/login_handler_post.handler
    events:
      - http:
          path: /login
          method: post
          cors: true

  update-password-post:
    name: update-password-lambda-post-${opt:stage}
    package:
      patterns:
        - src/authorization.py
        - src/update_password_handler_post.py
    handler: src/update_password_handler_post.handler
    events:
      - http:
          path: /update-password
          method: post
          cors: true

  employees-post:
    name: employees-lambda-post-${opt:stage}
    package:
      patterns:
        - src/utils/token.py
        - src/employees.py
        - src/authorization.py
        - src/employees_handler_post.py
    handler: src/employees_handler_post.handler
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - http:
          path: /employees
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: MedManageCognitoAuthorizer

resources:
  - Resources:
      IAMServerlessRoleMedManage:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          Policies:
            - PolicyName: Policy_api-lambda-db
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:BatchGetItem
                      - dynamodb:BatchWriteItem
                      - dynamodb:TagResource
                      - dynamodb:UntagResource
                      - dynamodb:PutItem
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:Scan
                      - dynamodb:Query
                      - dynamodb:UpdateItem
                    Resource:
                      - arn:aws:dynamodb:us-east-1:893303684985:table/organizations-${opt:stage}
                      - arn:aws:dynamodb:us-east-1:893303684985:table/employees-${opt:stage}
                      - arn:aws:dynamodb:us-east-1:893303684985:table/patients-${opt:stage}

                  - Effect: Allow
                    Action:
                      - logs:CreateLogStream
                      - logs:CreateLogGroup
                      - logs:PutLogEvents
                    Resource: "*"

                  - Effect: Allow
                    Action:
                      - cognito-idp:CreateGroup
                      - cognito-idp:AdminAddUserToGroup
                      - cognito-idp:AdminCreateUser
                      - cognito-idp:AdminUpdateUserAttributes
                      - cognito-idp:Authenticate
                      - cognito-idp:ListUsers
                      - cognito-idp:InitiateAuth
                      - cognito-idp:RespondToAuthChallenge
                    Resource: arn:aws:cognito-idp:us-east-1:893303684985:userpool/us-east-1_cx21iBehL

      MedManageCognitoAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
          Name: MedManageCognitoAuthorizer
          Type: COGNITO_USER_POOLS
          IdentitySource: method.request.header.Authorization
          ProviderARNs:
            - arn:aws:cognito-idp:us-east-1:893303684985:userpool/us-east-1_cx21iBehL
          RestApiId: ${ssm:med-manage-api-restApiId-${opt:stage}}

plugins:
  - serverless-offline
  - serverless-python-requirements
